# Install TensorFlow using: pip install tensorflow

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical

# Load the MNIST dataset (handwritten digits)
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Preprocess the data
train_images = train_images / 255.0
test_images = test_images / 255.0
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# Create a simple neural network model
model = Sequential([
    Flatten(input_shape=(28, 28)),  # Flatten the 28x28 image into a 1D array
    Dense(128, activation='relu'),   # Fully connected layer with 128 neurons and ReLU activation
    Dense(10, activation='softmax')  # Output layer with 10 neurons (one for each digit) and softmax activation
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=5, batch_size=32, validation_split=0.2)

# Evaluate the model on test data
test_loss, test_accuracy = model.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_accuracy:.4f}")

# Make predictions
def predict_digit(image):
    prediction = model.predict(image)
    return tf.argmax(prediction).numpy()

# Initialize context and preferences
context = {}
preferences = {'favorite_digit': None}

# Interactive chat with the user
print("Welcome to MyChatbot! Type 'exit' to quit.")
while True:
    user_input = input("You: ")
    if user_input.lower() == 'exit':
        break
    elif user_input.lower() == 'train':
        # Teach the chatbot
        user_digit = int(input("Enter a digit (0-9): "))
        user_image = test_images[user_digit].reshape(1, 28, 28)
        user_label = to_categorical(user_digit, num_classes=10)
        model.fit(user_image, user_label, epochs=1, verbose=0)
        print("Chatbot: Thanks for teaching me!")
    elif user_input.lower() == 'help':
        print("Chatbot: I can recognize handwritten digits. You can type a digit or use 'train' to teach me.")
    elif user_input.lower() == 'favorite':
        # Set user's favorite digit
        preferences['favorite_digit'] = int(input("Enter your favorite digit (0-9): "))
        print(f"Chatbot: Noted! Your favorite digit is {preferences['favorite_digit']}.")
    else:
        # Chatbot responds based on predicted digit
        try:
            user_digit = int(user_input)
            user_image = test_images[user_digit].reshape(1, 28, 28)
            predicted_digit = predict_digit(user_image)
            print(f"Chatbot: I think that's a {predicted_digit}.")
            # Update context
            context['last_digit'] = predicted_digit
            # Check user's favorite digit
            if preferences['favorite_digit'] is not None and predicted_digit == preferences['favorite_digit']:
                print("Chatbot: Your favorite digit! ðŸŽ‰")
        except ValueError:
            # Custom responses based on context
            if 'last_digit' in context:
                print(f"Chatbot: You mentioned {context['last_digit']} earlier. Is there anything else?")
            else:
                print("Chatbot: I'm not sure what you mean. Try again.")

# Save the trained model
model.save('mnist_model.h5')
print("Model saved successfully!")
